-------------------------------------------------------------------------------
# Step-1 : Jenkins Server Setup in Linux VM #

1) Create Ubuntu VM using AWS EC2 (t2.large)   
2) Enable 8080 Port Number in Security Group Inbound Rules
3) Connect to VM using MobaXterm
4) Instal Java

```
sudo apt update
sudo apt install fontconfig openjdk-17-jre
java -version
```

3) Install Jenkins
```
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins
```
4) Start Jenkins

```
sudo systemctl enable jenkins
sudo systemctl start jenkins
```

5) Verify Jenkins

```
sudo systemctl status jenkins
```
	
6) Open jenkins server in browser using VM public ip

```
http://public-ip:8080/
```

7) Copy jenkins admin pwd
```
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
```
	   
8) Create Admin Account and finish set up

----------------------------------------------------------------------------------------------

## Step-2 : Install Docker, sonar  on the Jenkins machine ##

##########docker installation on jenkins machine###############
```
curl -fsSL get.docker.com | /bin/bash
sudo usermod -aG docker jenkins
sudo systemctl restart jenkins
sudo docker version

## sonar installation on jenkins machine###############
docker run -d --name sonar -p 9000:9000 sonarqube:lts-community  > Sonar install on jenkins server
-----------------------------------------------------------------------------------------------------

## step-3: Step-4: Jenkins configuration for various tools, plugins and syatem configuration  ##

 1) Install Required Plugins in Jenkins 
    Eclipse Termurium, 
	SonarQube Scanner, 
	NodeJS, OWASP Dependency-check, 
	Docker API

 2) global tool configuration  jenkins dashboard- manageJenkins- tools
      SonarQube Scanner installation  tool name -sonar-server
      Add jdk - jdk17
      Add Nodejs - node16
	  
	 
  3)jenkins-sonar integration 

login sonar using http://publivip:9000/
go to sonar dashboard - Adminstartion -security- token generate token(sonar-token)
sonar dashboard- Adminstartion - configuration - webhooks - create (http://jenkinsip:8080/sonar-webhook/)

go to jenkins server and perform below action or do configuration
jenkins dashboard - system - sonarqube server- sonarqube installation
name: sonar-Serverserver url : http://sonarip:port
 

if Working with Shared Libraries in Jenkins 


=> Create git repo "Jenkins_shared_library" and push shared libraries related groovy files 

		Git Repo : https://github.com/jyoshikanchana/Jenkins_shared_library.git

=> Configure Shared Libraries in Jenkins (Manage Jenkins -> System -> Global Pipeline Libraries) give name as "Jenkins_shared_library" and use same name in pipeline.

## credential configuration on jenkins ##
 First create or collect credentials for bwelow resources
1) github creds - Gitbhub-settings-developer settingd-personal access tocken-tocken classic-create new tocken-tocken
2) sonar creds - sonardashboard-Adminstartion-security-tocken generate
3) docker creds - dockerhub uname/passwd

Jenkins dashboard- ManageJenkins- credentials
1) sonar-tocken  as secrete text
2) git-creds      as secrete text
3) docker  as uname/passwd


-------------------------------------------------------------------------------------------------------

# Step - 4 : Create EKS Management Host in AWS #

1) Launch new Ubuntu VM using AWS Ec2 ( t2.micro )	  
2) Connect to machine and install kubectl using below commands  
```
curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl   
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin
kubectl version --short --client
```
3) Install AWS CLI latest version using below commands 
```
sudo apt install unzip 
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
aws --version
```

4) Install eksctl using below commands
```
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
eksctl version   
```
-----------------------------------------------------------------------------------------------
# Step - 5 : Create IAM role & attach to EKS Management Host & Jenkins Server #

1) Create New Role using IAM service ( Select Usecase - ec2 ) 	
2) Add below permissions for the role   
	- IAM - fullaccess   
	- VPC - fullaccess   
	- EC2 - fullaccess    
	- CloudFomration - fullaccess    
	- Administrator - acces   
		
3) Enter Role Name (eksroleec2) 
4) Attach created role to EKS Management Host (Select EC2 => Click on Security => Modify IAM Role => attach IAM role we have created) 
5) Attach created role to Jenkins Machine (Select EC2 => Click on Security => Modify IAM Role => attach IAM role we have created) 
 -------------------------------------------------------------------------------------------------------------------------- 
# Step - 6 : Create EKS Cluster using eksctl # 
    Syntax:     

eksctl create cluster --name cluster-name  \
--region region-name \
--node-type instance-type \
--nodes-min 2 \
--nodes-max 2 \ 
--zones <AZ-1>,<AZ-2>

```
eksctl create cluster --name ashokit-cluster --region ap-south-1 --node-type t2.medium  --zones ap-south-1a,ap-south-1b    
```

Note: Cluster creation will take 5 to 10 mins of time (we have to wait). After cluster created we can check nodes using below command.	
```
kubectl get nodes  
```
-----------------------------------------------------------------------------------------------
# Step - 7 : Install AWS CLI in JENKINS Server #

URL : https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html  

    Execute below commands to install AWS CLI    
```
sudo apt install unzip 
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
aws --version
```
 ----------------------------------------------------------------------------------------------------------
# Step - 8 : Install Kubectl in JENKINS Server #
    Execute below commands in Jenkins server to install kubectl    

```
curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin
kubectl version --short --client
```
----------------------------------------------------------------------------
# Step - 9 : Update EKS Cluster Config File in Jenkins Server #
	
1) Execute below command in Eks Management host & copy kube config file data   
	$ cat .kube/config 

2) Execute below commands in Jenkins Server and paste kube config file    
	$ cd /var/lib/jenkins   
	$ sudo mkdir .kube    
	$ sudo vi .kube/config    

3) Execute below commands in Jenkins Server and paste kube config file for ubuntu user to check EKS Cluster info  
	$ cd ~   
	$ ls -la    
	$ sudo vi .kube/config    

4) check eks nodes   
	$ kubectl get nodes 

    Note: We should be able to see EKS cluster nodes here.    
-----------------------------------------------------------------------------------------
# Step - 10 : Create Jenkins CI JOB pipeline Job #


-     Stage-1:  clean workspace    
-     Stage-2 : Clone Git Repo       
-     Stage-3 : soanr-integration       
-     Stage-4 : dependency installation - npm installation        
-     Stage-5 : trivy filescan      
-     Stage-6 : owasp scan
-     stage-7 : dococker image build and push  
-     stage-8 : trigger CD JOB     
	
# Step - 11 : Create Jenkins CD Job #

-     Stage-1 : Clone k8s manifestfiles       
-     Stage-2 : Deploy app in k8s eks cluster       
-     Stage-3 : Send confirmatin email       

	
# Step - 12 : Trigger Jenkins CI Job #
-     CI Job will execute all the stages and it will trigger CD Job       
-     CD Job will fetch docker image and it will deploy on cluster    
	
# Step - 13 : Access Application in Browser #
-     We should be able to access our application       
URL : http://LBR
 OR HTTP://nodeport
	

